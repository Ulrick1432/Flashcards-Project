import React from "react";
import { useSelector } from "react-redux"; //is imported from "react-redux" to access data from the Redux store.
import { Link, useParams, Navigate } from "react-router-dom"; //for handling navigation and URL parameters.
import ROUTES from "../../app/routes";
// import selectors
import { selectQuizzes } from "../quizzes/quizzesSlice"; //are selectors used to retrieve quizzes and topics data from the Redux store, respectively.
import { selectTopics } from "./topicsSlice"; //are selectors used to retrieve quizzes and topics data from the Redux store, respectively.

export default function Topic() {
  const topics = useSelector(selectTopics);  // replace with selector
  const quizzes = useSelector(selectQuizzes); // replace with selector
  const { topicId } = useParams(); // It uses the useParams hook to get the topicId parameter from the current URL.
  const topic = topics[topicId];

 /*This conditional statement checks if the topic is falsy (i.e., if it doesn't exist in the topics data). 
  If the topic doesn't exist, it uses the <Navigate> component from "react-router-dom" to redirect the user to the topics route specified by ROUTES.topicsRoute()
  The replace prop is used to replace the current entry in the navigation history, 
  effectively preventing the user from going back to a non-existent topic.*/
  if(!topic) {
    return <Navigate to={ROUTES.topicsRoute()} replace/>
  }
  
  // Check if quizIds exist in the topic object before mapping
  const quizzesForTopic = topic.quizIds.map((quizId) => quizzes[quizId]);

  return (
    <section>
      <img src={topic.icon} alt="" className="topic-icon" />
      <h1>{topic.name}</h1>
      <ul className="quizzes-list">
        {quizzesForTopic.map((quiz) => (
          <li className="quiz" key={quiz.id}>
            <Link to={ROUTES.quizRoute(quiz.id)}>{quiz.name}</Link>
          </li>
        ))}
      </ul>
      <Link to="/quizzes/new" className="button center">
        Create a New Quiz
      </Link>
    </section>
  );
}

/*
  If the topic exists (not falsy), the component proceeds to render the topic details.
  It displays the topic's icon, name, and a list of quizzes related to that topic.
  The list of quizzes is generated by mapping over the quizIds associated with the topic and retrieving the corresponding quiz objects from the quizzes data.
  Each quiz is displayed as a link (<Link>) with its name. Clicking on a quiz link will navigate the user to the quiz details page using the ROUTES.quizRoute(quiz.id).
  Overall, this component provides a user interface for viewing the details of a specific topic, listing quizzes associated with that topic, and allowing the user to create a new quiz. 
  It also handles routing logic to ensure that users are redirected to the topics route if they try to access a non-existent topic.
*/